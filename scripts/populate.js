/**
 * This script can be used to populate answers for Peer Instruction tool.
 * It calls APIs to simulate student responses.
 *
 * It reads "populate.json" config file in script directory.
 * "populate.json.sample" can be used as a template. The following values
 * in the config file has to be set before running this script.
 * - baseUrl.cms: studio base URL
 * - baseUrl.lms: LMS base URL
 * - course_key: The course key can be found in the URL when authoring
 *   course in studio. The string `course-v1:UBC+PITEST201+2015W` is
 *   the course key in URL `https://edx.org/course/course-v1:UBC+PITEST201+2015W`
 * - xblock_prefix: the prefix string for PI xblock. It can be found under
 *   location key in "Staff Debug" section for any one of the PI xblock.
 *   `block-v1:UBC+PITEST201+2015W+type@ubcpi+block@` is the prefix for
 *   `location = block-v1:UBC+PITEST201+2015W+type@ubcpi+block@236462479e4e46d995ebf6c1ecd76bab`
 * - xblock_keys: array of PI xblock keys. They can be generated by
 *   exporting the course and unzip the content. Then run the following command:
 *   `grep ubcpi vertical/*|grep url_name | cut -d \" -f 2`
 *   Also using the following command to format as json array:
 *   `for i in `grep ubcpi vertical/*|grep url_name | cut -d \" -f 2`;do echo "\"$i\","; done;`
 *   Don't forget to remove the last comma as json doesn't like the extra comma at the end
 *
 * NOTE: in order to use this script, EdX auto auth feature has to be on.
 * See "Running Acceptance Tests" section in `README.md`.
 */

var api = require('./../ubcpi/static/js/features/support/api.js');
var async = require('async');

var config = require('./populate.json');

api.baseUrls = config.baseUrls;

async.timesSeries(config.answers.length, function(i, next) {
    async.timesSeries(config.xblock_keys.length, function(j, nextx) {

        async.series([
            function (cb) {
                api.createUserOrLogin(false, 'lms', config.course_key, cb);
            },
            function (cb) {
                api.piSubmitAnswer(config.course_key, config.xblock_prefix + config.xblock_keys[j], {
                    q: config.answers[i].original[0],
                    rationale: config.answers[i].original[1],
                    status: 0
                }, cb);
            },
            function (cb) {
                api.piSubmitAnswer(config.course_key, config.xblock_prefix + config.xblock_keys[j], {
                    q: config.answers[i].revised[0],
                    rationale: config.answers[i].revised[1],
                    status: 1
                }, cb);
            }
        ], function (err, results) {
            nextx(err, results);
        });
    }, function(err, results) {
       next(err, results);
    });
});
